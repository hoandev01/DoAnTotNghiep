@model List<ChickenF.Models.Product>

@{
    ViewData["Title"] = "Shop";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- ✅ Hiệu ứng Hover CSS -->
<style>
    .card {
        transition: all 0.3s ease;
        border: none;
        border-radius: 1rem;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 24px rgba(0, 0, 0, 0.15);
        }

    .card-img-top {
        height: 200px;
        object-fit: cover;
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
        transition: filter 0.3s ease;
    }

    .card:hover .card-img-top {
        filter: brightness(90%);
    }

    .card .btn {
        transition: transform 0.2s ease-in-out;
    }

        .card .btn:hover {
            transform: scale(1.05);
        }

    .badge {
        font-size: 0.8rem;
        padding: 0.4em 0.6em;
        border-radius: 0.5rem;
    }

    .form-select {
        border-radius: 0.5rem;
    }
</style>

<div class="container py-5">
    <h1 class="mb-4 text-primary">Shop</h1>

    <!-- Sort Dropdown -->
    <form method="get" asp-controller="Shop" asp-action="Index" class="mb-4">
        <div class="col-md-3">
            <select class="form-select" name="sort" onchange="this.form.submit()">
                <option value="">-- Sort by --</option>
                <option value="priceAsc" selected="@(ViewData["Sort"]?.ToString() == "priceAsc")">Price Increase</option>
                <option value="priceDesc" selected="@(ViewData["Sort"]?.ToString() == "priceDesc")">Price Decrease</option>
            </select>
        </div>
    </form>

    <!-- Toast -->
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 9999;">
        <div id="cartToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">✅ Added to Cart!</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    <!-- Product Grid -->
    <div class="row">
        @foreach (var product in Model)
        {
            var stock = product.ProductStock;
            var price = product.Price;
            bool isOutOfStock = stock == 0;
            bool isRecentlySoldOut = isOutOfStock && product.OutOfStockAt.HasValue && product.OutOfStockAt.Value >= DateTime.Now.AddDays(-1);

            <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                <div class="card h-100 shadow-sm">
                    <div class="position-relative">
                        @if (isOutOfStock)
                        {
                            <span class="position-absolute top-0 start-0 badge bg-danger m-2">
                                @(isRecentlySoldOut ? "🔥 Just sold out" : "Sold out")
                            </span>
                        }
                        <img src="@(!string.IsNullOrEmpty(product.Image) ? product.Image : "https://via.placeholder.com/300x200")"
                             class="card-img-top" alt="@product.ProductName">
                    </div>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@product.ProductName</h5>
                        <p class="card-text text-danger fw-bold">@price.ToString("N0", System.Globalization.CultureInfo.InvariantCulture)</p>
                        <p class="text-muted">Inventory: <strong>@stock</strong></p>

                        @if (!isOutOfStock)
                        {
                            <div class="mb-2">
                                <label class="form-label">Choose Package:</label>
                                <select class="form-select package-select"
                                        data-stock="@stock"
                                        data-price="@price"
                                        data-product-id="@product.Id">
                                    @if (stock >= 10)
                                    {
                                        <option value="10">10 chickens</option>
                                    }
                                    @if (stock >= 50)
                                    {
                                        <option value="50">50 chickens (-5%)</option>
                                    }
                                    @if (stock >= 100)
                                    {
                                        <option value="100">100 chickens (-10%)</option>
                                    }
                                    @if (stock >= 200)
                                    {
                                        <option value="200">200 chickens (-15%)</option>
                                    }
                                    @if (stock >= 500)
                                    {
                                        <option value="500">500 chickens (-20%)</option>
                                    }
                                    @if (stock >= 1000)
                                    {
                                        <option value="1000">1000 chickens (-25%)</option>
                                    }
                                </select>
                            </div>

                            <div class="text-secondary mb-3">
                                <div><strong>Quantity:</strong> <span id="quantityDisplay_@product.Id">--</span></div>
                                <div><strong>Total(VND):</strong> <span id="priceDisplay_@product.Id">--</span></div>
                            </div>
                        }

                        <div class="mt-auto d-flex gap-2">
                            <a asp-action="Detail" asp-route-id="@product.Id" class="btn btn-outline-primary w-100">View</a>

                            @if (!isOutOfStock)
                            {
                                <button type="button"
                                        class="btn btn-success w-100 add-to-cart-btn"
                                        data-product-id="@product.Id">
                                    + Add
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-secondary w-100" disabled>Sold Out</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const toast = new bootstrap.Toast(document.getElementById('cartToast'));

            function updatePackage(select) {
                const stock = parseInt(select.dataset.stock);
                const price = parseFloat(select.dataset.price);
                const quantity = parseInt(select.value);
                const productId = select.dataset.productId;

                let discount = 0;
                if (quantity >= 1000) discount = 0.25;
                else if (quantity >= 500) discount = 0.20;
                else if (quantity >= 200) discount = 0.15;
                else if (quantity >= 100) discount = 0.10;
                else if (quantity >= 50) discount = 0.05;

                const total = quantity * price * (1 - discount);

                document.getElementById("quantityDisplay_" + productId).innerText = quantity;
                document.getElementById("priceDisplay_" + productId).innerText = total.toLocaleString('en-US') ;


                select.dataset.calculatedQuantity = quantity;
            }

            // Gán event listener cho tất cả package-select
            document.querySelectorAll('.package-select').forEach(select => {
                select.addEventListener('change', function () {
                    updatePackage(this);
                });

                // Tự động cập nhật lúc mới load
                updatePackage(select);
            });

            document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const productId = this.dataset.productId;
                    const select = document.querySelector(`.package-select[data-product-id='${productId}']`);
                    let quantity = select?.dataset.calculatedQuantity;
                    if (!quantity) {
                        quantity = parseInt(select.value) || 10;
                    }

                    fetch('@Url.Action("AddToCart", "Cart")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: `productId=${productId}&quantity=${quantity}`
                    })
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                                toast.show();
                            } else {
                                if (data.redirectToLogin) window.location.href = '@Url.RouteUrl("login")';
                                else alert(data.message);
                            }
                        })
                        .catch(() => alert("An error occurred."));
                });
            });
        });
    </script>
}


